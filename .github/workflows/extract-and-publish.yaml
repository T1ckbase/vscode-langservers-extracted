name: Extract and Publish to npm

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * 2' 
  # push:
  #   tags:
  #     - "v*"

jobs:
  extract-and-publish:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v5
        with:
          node-version: 'lts/*'
          registry-url: 'https://registry.npmjs.org'

      - name: Check for new version
        id: version_check
        run: |
          PACKAGE_NAME="@t1ckbase/vscode-langservers-extracted"

          echo "Fetching latest VS Code stable version..."
          LATEST_VERSION=$(curl -fsSL -o vscode.zip -w '%{url_effective}' "https://code.visualstudio.com/sha/download?build=stable&os=win32-x64-archive" | grep -oP '(\d+\.\d+\.\d+)(?=\.zip)')

          if [ -z "$LATEST_VERSION" ]; then
            echo "::error::Could not determine latest VS Code version."
            exit 1
          fi

          if [ -z "$LATEST_VERSION" ]; then
            echo "::error::Could not determine latest VS Code version."
            exit 1
          fi

          echo "Latest VS Code version is: $LATEST_VERSION"

          echo "Fetching currently published npm version..."
          CURRENT_VERSION=$(npm view $PACKAGE_NAME version || echo "0.0.0")
          echo "Currently published version is: $CURRENT_VERSION"

          echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Announce no update needed
        if: steps.version_check.outputs.latest_version == steps.version_check.outputs.current_version
        run: echo "Package is already up to date with version ${{ steps.version_check.outputs.latest_version }}. No action needed."

      - name: Extract and Publish new version
        if: steps.version_check.outputs.latest_version != steps.version_check.outputs.current_version
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          LATEST_VERSION=${{ steps.version_check.outputs.latest_version }}
          echo "New version $LATEST_VERSION found. Starting extract and publish process..."

          echo "Fetching dependencies from the 'extensions' root package.json..."
          curl -sSL "https://raw.githubusercontent.com/microsoft/vscode/refs/tags/$LATEST_VERSION/extensions/package.json" -o vscode-extensions-pkg.json

          jq -s '.[0] * {dependencies: .[1].dependencies}' package.json vscode-extensions-pkg.json > package.json.tmp && mv package.json.tmp package.json
          rm vscode-extensions-pkg.json
          echo "Dependencies updated in local package.json."

          # npm --no-git-tag-version version $LATEST_VERSION
          npm --no-git-tag-version version 0.0.0

          mkdir vscode
          unzip -q vscode.zip -d vscode
          rm vscode.zip

          echo "Copying language server files..."
          mkdir bin
          cp vscode/resources/app/extensions/css-language-features/server/dist/node/* bin/
          cp vscode/resources/app/extensions/html-language-features/server/dist/node/* bin/
          cp vscode/resources/app/extensions/json-language-features/server/dist/node/* bin/
          rm -rf vscode

          echo "Verifying that all server files were copied correctly..."
          FILES_TO_CHECK=(
            "bin/cssServerMain.js"
            "bin/htmlServerMain.js"
            "bin/jsonServerMain.js"
          )

          for file in "${FILES_TO_CHECK[@]}"; do
            if [ ! -f "$file" ]; then
              echo "::error::Verification failed! Required file not found: $file"
              exit 1
            fi
            sed -i '1i #!/usr/bin/env node' $file
          done

          echo "Publishing to npm..."
          npm publish --provenance --access public